from keras.datasets import mnist
from keras.utils.np_utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten
from sklearn.metrics import classification_report

# Clean data

(x_train, y_train), (x_test, y_test) = mnist.load_data()

y_example = to_categorical(y_train)

y_cat_test = to_categorical(y_test, 10)
y_cat_train = to_categorical(y_train, 10)

# Normalize data
x_train = x_train / 255
x_test = x_test / 255

x_train = x_train.reshape(60000, 28, 28, 1)

x_test = x_test.reshape(10000, 28, 28, 1)

# Making & training model

model = Sequential()

# Convolutional layer
model.add(Conv2D(filters=32, kernel_size=(4, 4), input_shape=(28, 28, 1), activation='relu'))

# Pooling layer
model.add(MaxPool2D(pool_size=(2, 2)))

# Flatten to 764
model.add(Flatten())

# Dense Hidden Layer
model.add(Dense(128, activation='relu'))

# Last Layer
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# Train Model

model.fit(x_train, y_cat_train, epochs=2)

# Evaluation

model.evaluate(x_test, y_cat_test)

predictions = model.predict_classes(x_test)

predictions = (classification_report(y_test, predictions))

print(predictions)
